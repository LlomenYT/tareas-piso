---
// Tipos
// Tipos de datos
interface BasePerson {
  name: string;
  color: 'antonio' | 'ruben' | 'carlos';
}

interface Person extends BasePerson {
  task: string;
}


// Configuración de personas
const PEOPLE: BasePerson[] = [
  { name: 'Antonio', color: 'antonio' },
  { name: 'Ruben', color: 'ruben' },
  { name: 'Carlos', color: 'carlos' }
];

// Tareas disponibles en orden
const TASKS = ['Baño', 'Salón', 'Cocina'] as const;

// Función para ajustar el día de la semana (0 = Domingo, 1 = Lunes, etc.)
const getDayOfWeek = (date: Date): number => {
  return (date.getDay() + 6) % 7; // Convertir a Lunes (0) a Domingo (6)
};

// Obtener el número de semana actual (1-52) con la semana empezando en Lunes
const getCurrentWeekNumber = (date: Date = new Date()): number => {
  const d = new Date(date);
  d.setHours(0, 0, 0, 0);
  d.setDate(d.getDate() + 3 - ((d.getDay() + 6) % 7 + 1)); // Jueves de la semana actual
  const week1 = new Date(d.getFullYear(), 0, 4); // Jueves de la semana 1
  return 1 + Math.round(((d.getTime() - week1.getTime()) / 86400000) / 7);
};

// Obtener el mes actual en formato texto con la primera letra en mayúscula
const getMonthName = (date: Date): string => {
  const monthName = date.toLocaleString('es-ES', { month: 'long', year: 'numeric' }).replace('de', '').trim();
  return monthName.charAt(0).toUpperCase() + monthName.slice(1);
};

// Obtener la rotación de tareas para una semana específica
const getTasksForWeek = (weekNumber: number): Person[] => {
  // Rotación base: 0, 1, 2, 0, 1, 2, ...
  const baseRotation = (weekNumber - 1) % 3;
  
  // Asignar tareas a cada persona en orden rotativo
  return TASKS.map((task, index) => {
    const personIndex = (baseRotation + index) % PEOPLE.length;
    return {
      ...PEOPLE[personIndex],
      task: task
    };
  });
};


// Fecha actual
const today = new Date();
const currentWeek = getCurrentWeekNumber(today);
const currentMonth = today.getMonth();
const currentYear = today.getFullYear();

// Obtener días del mes actual
const getDaysInMonth = (year: number, month: number): Date[] => {
  const date = new Date(year, month, 1);
  const days = [];
  
  while (date.getMonth() === month) {
    days.push(new Date(date));
    date.setDate(date.getDate() + 1);
  }
  
  return days;
};

const daysInMonth = getDaysInMonth(currentYear, currentMonth);
const firstDayOfMonth = getDayOfWeek(new Date(currentYear, currentMonth, 1));

// Añadir días del mes anterior
const prevMonthDays = [];
const prevMonthLastDay = new Date(currentYear, currentMonth, 0).getDate();
for (let i = firstDayOfMonth - 1; i >= 0; i--) {
  prevMonthDays.push(new Date(currentYear, currentMonth - 1, prevMonthLastDay - i));
}

// Calcular cuántos días del siguiente mes necesitamos para completar la última semana
const totalDays = prevMonthDays.length + daysInMonth.length;
const remainingDays = (7 - (totalDays % 7)) % 7;
const nextMonthDays = [];
for (let i = 1; i <= remainingDays; i++) {
  nextMonthDays.push(new Date(currentYear, currentMonth + 1, i));
}

// Combinar todos los días
const allDays = [...prevMonthDays, ...daysInMonth, ...nextMonthDays];

// Agrupar por semanas (empezando por Lunes)
const weeks = [];
for (let i = 0; i < allDays.length; i += 7) {
  weeks.push(allDays.slice(i, i + 7));
}

// Obtener las tareas para cada semana
const weeklyAssignments = weeks.map((week) => {
  const firstDayOfWeek = week[0];
  const weekNumber = getCurrentWeekNumber(firstDayOfWeek);
  return {
    weekNumber,
    tasks: getTasksForWeek(weekNumber),
    days: week
  };
});
---

<div class="min-h-screen p-4">
  <div class="max-w-6xl mx-auto">
    <!-- Encabezado con mes y año -->
    <div class="text-center mb-8">
      <h1 class="text-3xl font-bold text-gray-800 mb-2">Tareas del Hogar</h1>
      <h2 class="text-2xl text-gray-600">
        {getMonthName(today)}
      </h2>
    </div>

        <!-- Leyenda de tareas y asignaciones -->
        <div class="mt-8 p-4 bg-white rounded-lg shadow">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Asignación de tareas</h3>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            {TASKS.map((task) => {
              const taskAssignment = weeklyAssignments[0]?.tasks.find(t => t.task === task);
              const person = taskAssignment ? PEOPLE.find(p => p.name === taskAssignment.name) : null;
              
              return (
                <div class="border rounded-lg p-3">
                  <h4 class="font-medium text-gray-800 mb-2">{task}</h4>
                  <div class="flex items-center">
                    {person ? (
                      <>
                        <div 
                          class={`
                            w-3 h-3 rounded-full mr-2
                            ${person.color === 'antonio' ? 'bg-red-500' : ''}
                            ${person.color === 'ruben' ? 'bg-green-500' : ''}
                            ${person.color === 'carlos' ? 'bg-yellow-500' : ''}
                          `}
                        ></div>
                        <span class="text-sm text-gray-600">
                          {person.name}
                        </span>
                      </>
                    ) : (
                      <span class="text-sm text-gray-400">Sin asignar</span>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
          
          <div class="mt-6">
            <h4 class="font-medium text-gray-800 mb-3">Personas</h4>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
              {PEOPLE.map((person) => (
                <div class="flex items-center p-2 rounded-lg bg-gray-50">
                  <div 
                    class={`
                      w-4 h-4 rounded-full mr-2
                      ${person.color === 'antonio' ? 'bg-red-500' : ''}
                      ${person.color === 'ruben' ? 'bg-green-500' : ''}
                      ${person.color === 'carlos' ? 'bg-yellow-500' : ''}
                    `}
                  ></div>
                  <span class="text-sm font-medium text-gray-700">{person.name}</span>
                </div>
              ))}
            </div>
          </div>
        </div>

    <!-- Calendario -->
    <div class="bg-white rounded-lg shadow-lg overflow-hidden mt-5">
      <!-- Días de la semana -->
      <div class="grid grid-cols-7 bg-gray-800 text-white py-3">
        {['L', 'M', 'X', 'J', 'V', 'S', 'D'].map((day, index) => (
          <div key={index} class="text-center text-sm font-medium">
            {day}
          </div>
        ))}
      </div>

      <!-- Semanas del mes -->
      <div class="divide-y divide-gray-200">
        {weeklyAssignments.map((weekData, weekIndex) => {
          const isCurrentWeek = weekData.days.some(
            day => day.getDate() === today.getDate() && 
                  day.getMonth() === today.getMonth()
          );
          
          return (
            <div key={weekIndex} class={`${isCurrentWeek ? 'bg-blue-50' : ''}`}>
              {/* Fila de días de la semana */}
              <div class="grid grid-cols-7">
                {weekData.days.map((day, dayIndex) => {
                  const isToday = 
                    day.getDate() === today.getDate() && 
                    day.getMonth() === today.getMonth();
                    
                  const isCurrentMonth = day.getMonth() === currentMonth;
                  
                  return (
                    <div 
                      key={`day-${dayIndex}`}
                      class={`
                        p-1 border border-gray-100 min-h-8 relative
                        ${!isCurrentMonth ? 'bg-gray-50 text-gray-400' : ''}
                        ${isToday ? 'ring-1 ring-blue-500' : ''}
                      `}
                    >
                      <div class="flex justify-between items-start">
                        <span class={`text-xs ${isToday ? 'text-blue-600 font-bold' : ''}`}>
                          {day.getDate()}
                        </span>
                      </div>
                    </div>
                  );
                })}
              </div>
              
              {/* Fila de tareas - una sola fila por semana */}
              {weekData.tasks.map((task, taskIndex) => {
                const taskColor = task.color === 'antonio' ? 'red' : task.color === 'ruben' ? 'green' : 'yellow';
                return (
                  <div key={`task-${taskIndex}`} class="grid grid-cols-7">
                    <div 
                      class={`
                        col-span-7 p-2 border-t border-gray-200
                        bg-${taskColor}-50 text-${taskColor}-800
                        flex items-center
                      `}
                    >
                      <div 
                        class={`
                          w-3 h-3 rounded-full mr-2 flex-shrink-0
                          bg-${taskColor}-500
                        `}
                      ></div>
                      <span class="font-medium">{task.task}</span>
                      <span class="ml-2 text-sm">({task.name})</span>
                    </div>
                  </div>
                );
              })}
              
              {/* Espaciador entre semanas */}
              <div class="h-2"></div>
            </div>
          );
        })}
      </div>
    </div>
  </div>
</div>
